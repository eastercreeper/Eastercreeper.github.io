/// <reference path="../../../../../types/draggable.d.ts" />
import * as CSS from 'csstype';
import * as React from 'react';
import { DraggableProps } from 'react-draggable';
import List from '../List';
type WrapperProps = {
    width?: CSS.Property.Width;
    height?: CSS.Property.Height;
    active?: boolean;
};
type ButtonWrapperProps = {
    buttonsAlignment?: CSS.Property.JustifyContent;
};
export type ModalButtons = {
    value: string;
    onClick(event: React.MouseEvent): void;
};
export type ModalMenu = {
    name: string;
    list: React.ReactElement<typeof List>;
};
export type ModalDefaultPosition = {
    x: number;
    y: number;
};
export type ModalProps = {
    icon?: React.ReactElement;
    closeModal(event: React.MouseEvent): void;
    title: string;
    buttons?: Array<ModalButtons>;
    menu?: Array<ModalMenu>;
    defaultPosition?: DraggableProps['defaultPosition'];
    positionOffset?: DraggableProps['positionOffset'];
    hasWindowButton?: boolean;
} & Omit<WrapperProps, 'active'> & ButtonWrapperProps & React.HTMLAttributes<HTMLDivElement>;
declare const Modal: React.ForwardRefExoticComponent<{
    icon?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    closeModal(event: React.MouseEvent): void;
    title: string;
    buttons?: ModalButtons[] | undefined;
    menu?: ModalMenu[] | undefined;
    defaultPosition?: import("react-draggable").ControlPosition | undefined;
    positionOffset?: import("react-draggable").PositionOffsetControlPosition | undefined;
    hasWindowButton?: boolean | undefined;
} & Omit<WrapperProps, "active"> & ButtonWrapperProps & React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>;
export default Modal;
