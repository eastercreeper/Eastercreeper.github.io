function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
/* eslint-disable react/no-array-index-key */
import React, { forwardRef } from 'react';
import styled from '@xstyled/styled-components';
import { ModalContext } from '../Modal';
import Frame from '../Frame';
import Clock from './Clock';
import WindowButton from './WindowButton';
import { Logo } from '@react95/icons';
var Truncate = styled.span.withConfig({
  displayName: "TaskBar__Truncate",
  componentId: "sc-2weywn-0"
})(["\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-line-clamp: 1;\n  -webkit-box-orient: vertical;\n  text-align: left;\n"]);
var TaskBar = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var list = _ref.list;
  var _React$useState = React.useState(false),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    showList = _React$useState2[0],
    toggleShowList = _React$useState2[1];
  var _React$useState3 = React.useState(false),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    activeStart = _React$useState4[0],
    toggleActiveStart = _React$useState4[1];
  var _React$useContext = React.useContext(ModalContext),
    windows = _React$useContext.windows,
    activeWindow = _React$useContext.activeWindow,
    setActiveWindow = _React$useContext.setActiveWindow;
  return /*#__PURE__*/React.createElement(Frame, {
    position: "fixed",
    bottom: 0,
    left: 0,
    right: 0,
    display: "flex",
    justifyContent: "space-between",
    h: 28,
    w: "100%",
    padding: 2,
    zIndex: "taskbar",
    ref: ref
  }, showList && /*#__PURE__*/React.createElement(Frame, {
    position: "absolute",
    bottom: "28",
    onClick: function onClick() {
      toggleActiveStart(false);
      toggleShowList(false);
    }
  }, list), /*#__PURE__*/React.createElement(WindowButton, {
    small: true,
    icon: /*#__PURE__*/React.createElement(Logo, {
      variant: "32x32_4"
    }),
    active: activeStart,
    onClick: function onClick() {
      toggleActiveStart(!activeStart);
      toggleShowList(!showList);
    }
  }, "Start"), /*#__PURE__*/React.createElement(Frame, {
    boxShadow: "none",
    w: "100%",
    paddingLeft: 0,
    ml: 2,
    display: "flex"
  }, Object.entries(windows).map(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
      windowId = _ref3[0],
      _ref3$ = _ref3[1],
      icon = _ref3$.icon,
      title = _ref3$.title,
      hasButton = _ref3$.hasButton;
    return hasButton && /*#__PURE__*/React.createElement(WindowButton, {
      key: windowId,
      icon: icon,
      active: windowId === activeWindow,
      onClick: function onClick() {
        return setActiveWindow(windowId);
      },
      small: false
    }, /*#__PURE__*/React.createElement(Truncate, null, title));
  })), /*#__PURE__*/React.createElement(Clock, null));
});
TaskBar.defaultProps = {
  list: undefined
};
export default TaskBar;