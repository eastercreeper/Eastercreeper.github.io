var _excluded = ["children", "style", "defaultActiveTab", "onChange"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import styled from '@xstyled/styled-components';
import React, { forwardRef } from 'react';
import Frame from '../Frame';
import Tab from './Tab';
var Navbar = styled(Frame).withConfig({
  displayName: "Tabs__Navbar",
  componentId: "sc-1r3cxnf-0"
})(["\n  display: flex;\n  padding: 0;\n  margin: 0;\n  border: none;\n  box-shadow: none;\n  background-color: unset;\n"]);
var NavContainer = styled(Frame).withConfig({
  displayName: "Tabs__NavContainer",
  componentId: "sc-1r3cxnf-1"
})(["\n  padding: 12;\n  box-shadow: out;\n"]);
NavContainer.displayName = 'NavContainer';
var Tabs = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
    style = _ref.style,
    defaultActiveTab = _ref.defaultActiveTab,
    onChange = _ref.onChange,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _ref2 = React.Children.toArray(children),
    _ref3 = _slicedToArray(_ref2, 1),
    firstTab = _ref3[0];
  var _React$useState = React.useState(defaultActiveTab || firstTab.props.title),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    activeTab = _React$useState2[0],
    setActiveTab = _React$useState2[1];
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, _extends({
    style: style
  }, rest, {
    as: "ol",
    ref: ref
  }), React.Children.map(children, function (child) {
    var _child$props = child.props,
      title = _child$props.title,
      disabled = _child$props.disabled;
    return /*#__PURE__*/React.createElement(Tab, _extends({
      key: title
    }, child.props, {
      activeTab: activeTab,
      onClick: function onClick(e) {
        if (!disabled) {
          if (onChange) {
            onChange(title, e);
          }
          setActiveTab(title);
        }
      }
    }));
  })), /*#__PURE__*/React.createElement(NavContainer, {
    style: style
  }, React.Children.map(children, function (child) {
    return child.props.title === activeTab && child.props.children;
  })));
});
export default Tabs;