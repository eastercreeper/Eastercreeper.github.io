var _excluded = ["data"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import Node, { icons } from './Node';
var TreeParent = styled.ul.withConfig({
  displayName: "Tree__TreeParent",
  componentId: "sc-1wiuvvx-0"
})(["\n  padding: 0;\n"]);
var Tree = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var data = _ref.data,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(TreeParent, _extends({}, rest, {
    ref: ref
  }), data.map(function (dataNode) {
    return /*#__PURE__*/React.createElement(Node, _extends({
      key: dataNode.id
    }, dataNode));
  }));
});
Tree.defaultProps = {
  data: []
};
Tree.icons = icons;
export default Tree;