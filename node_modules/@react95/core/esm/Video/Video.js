function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["name", "src", "videoProps", "style"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import * as React from 'react';
import styled, { css } from '@xstyled/styled-components';
import { Mplayer113, User4 } from '@react95/icons';
import Frame from '../Frame/Frame';
import Button from '../Button';
import Range from '../Range';
import TitleBar from '../TitleBar';
import { Play, Pause, Stop, Fullscreen } from './buttons';
import Divider from '../List/ListDivider';
var VideoTag = styled.video.withConfig({
  displayName: "Video__VideoTag",
  componentId: "sc-aeevd2-0"
})(["\n  width: 100%;\n  padding: 2;\n\n  display: ", ";\n"], function (_ref) {
  var visible = _ref.visible;
  return visible ? 'block' : 'none';
});
var Source = function Source(_ref2) {
  var src = _ref2.src;
  return /*#__PURE__*/React.createElement("source", {
    src: src,
    type: "video/".concat(src.substring(src.length - 3))
  });
};
var ControlBtn = styled(Button).withConfig({
  displayName: "Video__ControlBtn",
  componentId: "sc-aeevd2-1"
})(["\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n\n  svg {\n    fill: materialText;\n  }\n\n  &&,\n  &:active,\n  &:focus {\n    width: 20px;\n    height: 20px;\n    padding: 7;\n\n    ", "\n  }\n"], function (_ref3) {
  var disabled = _ref3.disabled;
  return disabled && css(["\n        padding: 4;\n        svg {\n          fill: borderDark;\n          border-bottom: 1px solid;\n          border-bottom-color: borderLightest;\n          border-right: 1px solid;\n          border-right-color: borderLightest;\n        }\n      "]);
});
var Controls = styled.div.withConfig({
  displayName: "Video__Controls",
  componentId: "sc-aeevd2-2"
})(["\n  display: flex;\n  align-items: center;\n  padding: 2 0;\n"]);
var CountDownContainer = styled(Frame).withConfig({
  displayName: "Video__CountDownContainer",
  componentId: "sc-aeevd2-3"
})(["\n  display: flex;\n  padding: 6;\n  margin-bottom: 4;\n\n  box-shadow: in;\n  background-color: canvas;\n  height: 50px;\n\n  color: canvasText;\n"]);
var VideoFont = styled.span.withConfig({
  displayName: "Video__VideoFont",
  componentId: "sc-aeevd2-4"
})(["\n  font-family: 'React95Video-Numbers';\n  text-transform: uppercase;\n"]);
var ResetFrame = styled(Frame).withConfig({
  displayName: "Video__ResetFrame",
  componentId: "sc-aeevd2-5"
})(["\n  background-color: transparent;\n  box-shadow: none;\n"]);
var VideoRange = styled(Range).withConfig({
  displayName: "Video__VideoRange",
  componentId: "sc-aeevd2-6"
})(["\n  &::-webkit-slider-thumb {\n    height: 18px;\n    margin-top: -7px;\n    width: 10px;\n  }\n\n  &[value='0']::-webkit-slider-thumb {\n    margin-left: -2px;\n  }\n"]);
var PlayOrPause = function PlayOrPause(_ref4) {
  var playing = _ref4.playing;
  return playing ? /*#__PURE__*/React.createElement(Pause, null) : /*#__PURE__*/React.createElement(Play, null);
};
var arrayFy = function arrayFy(str) {
  return [].concat(str);
};
function updateProgressBar(player, updateProgress) {
  var percentage = Math.floor(100 / player.duration * player.currentTime);
  updateProgress(percentage);
}
function parseCurrentTime(secs) {
  if (!secs) {
    return '00:00';
  }
  var sec = parseInt(secs.toString(), 10);
  var hours = Math.floor(sec / 3600);
  var minutes = Math.floor(sec / 60) % 60;
  var seconds = sec % 60;
  return [hours, minutes, seconds].map(function (v) {
    return v < 10 ? "0".concat(v) : v;
  }).filter(function (v, i) {
    return v !== '00' || i > 0;
  }).join(':');
}
var VideoRenderer = function VideoRenderer(_ref5, ref) {
  var name = _ref5.name,
    src = _ref5.src,
    videoProps = _ref5.videoProps,
    style = _ref5.style,
    props = _objectWithoutProperties(_ref5, _excluded);
  var _React$useState = React.useState(false),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    playing = _React$useState2[0],
    setPlaying = _React$useState2[1];
  var _React$useState3 = React.useState(false),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    loadeddata = _React$useState4[0],
    setLoadeddata = _React$useState4[1];
  var _React$useState5 = React.useState(0),
    _React$useState6 = _slicedToArray(_React$useState5, 2),
    progress = _React$useState6[0],
    setProgress = _React$useState6[1];
  var player = React.useRef(null);
  var progressRef = React.useRef(null);
  var wrapperRef = React.useRef(null);
  var playPauseRef = React.useRef(null);
  var stopRef = React.useRef(null);
  var fullScreenRef = React.useRef(null);
  var paths = arrayFy(src);
  var _paths = _slicedToArray(paths, 1),
    pathname = _paths[0];
  var normalizedName = name || pathname.replace(/^.*[\\/]/, '');
  var title = "".concat(normalizedName).concat(!loadeddata ? ' (Opening)' : '');
  React.useImperativeHandle(ref, function () {
    return {
      get video() {
        return player;
      },
      get progress() {
        return progressRef;
      },
      get wrapper() {
        return wrapperRef;
      },
      get playpause() {
        return playPauseRef;
      },
      get stop() {
        return stopRef;
      },
      get fullScreen() {
        return fullScreenRef;
      }
    };
  });
  React.useEffect(function () {
    var _player$current, _player$current2, _player$current3, _player$current4;
    (_player$current = player.current) === null || _player$current === void 0 || _player$current.addEventListener('ended', function () {
      setPlaying(false);
      setProgress(0);
    }, false);
    (_player$current2 = player.current) === null || _player$current2 === void 0 || _player$current2.addEventListener('timeupdate', function () {
      if (player.current) {
        updateProgressBar(player.current, setProgress);
      }
    }, false);
    (_player$current3 = player.current) === null || _player$current3 === void 0 || _player$current3.addEventListener('loadeddata', function () {
      setLoadeddata(true);
    }, false);
    (_player$current4 = player.current) === null || _player$current4 === void 0 || _player$current4.addEventListener('playing', function () {
      setPlaying(true);
    }, false);
  }, [player.current]);
  return /*#__PURE__*/React.createElement(Frame, _extends({
    p: 2
  }, props, {
    style: _objectSpread({
      width: !loadeddata ? 260 : undefined
    }, style),
    ref: wrapperRef
  }), /*#__PURE__*/React.createElement(TitleBar, {
    icon: /*#__PURE__*/React.createElement(Mplayer113, {
      variant: "16x16_4"
    }),
    title: title
  }), /*#__PURE__*/React.createElement(VideoTag, _extends({}, videoProps, {
    visible: loadeddata,
    ref: player
  }), paths.map(function (s) {
    return /*#__PURE__*/React.createElement(Source, {
      key: s,
      src: s
    });
  })), loadeddata && /*#__PURE__*/React.createElement(Divider, {
    as: "span",
    style: {
      display: 'block',
      marginBottom: 2
    }
  }), /*#__PURE__*/React.createElement(ResetFrame, {
    maxWidth: "250",
    mx: "auto",
    mb: 4
  }, /*#__PURE__*/React.createElement(CountDownContainer, null, /*#__PURE__*/React.createElement(ResetFrame, {
    display: "flex",
    flexDirection: "column",
    w: "40%"
  }, /*#__PURE__*/React.createElement(VideoFont, {
    style: {
      marginTop: 'auto'
    }
  }, player.current && parseCurrentTime(player.current.duration)), /*#__PURE__*/React.createElement(VideoFont, {
    style: {
      height: 12
    }
  }, !loadeddata && 'Openning')), /*#__PURE__*/React.createElement(ResetFrame, {
    display: "flex",
    flexDirection: "column",
    w: "40%"
  }, /*#__PURE__*/React.createElement(VideoFont, {
    style: {
      marginTop: 'auto',
      fontSize: 22
    }
  }, player.current && parseCurrentTime(player.current.currentTime)), /*#__PURE__*/React.createElement(VideoFont, {
    style: {
      height: 12
    }
  }, "time"))), /*#__PURE__*/React.createElement(Controls, null, /*#__PURE__*/React.createElement(ControlBtn, {
    disabled: !loadeddata,
    onClick: function onClick() {
      if (!playing) {
        var _player$current5;
        (_player$current5 = player.current) === null || _player$current5 === void 0 || _player$current5.play();
      } else {
        var _player$current6;
        (_player$current6 = player.current) === null || _player$current6 === void 0 || _player$current6.pause();
      }
      setPlaying(!playing);
    },
    ref: playPauseRef
  }, loadeddata ? /*#__PURE__*/React.createElement(PlayOrPause, {
    playing: playing
  }) : /*#__PURE__*/React.createElement(User4, {
    style: {
      borderRight: 'none',
      borderBottom: 'none'
    },
    variant: "32x32_4"
  })), /*#__PURE__*/React.createElement(ControlBtn, {
    disabled: !loadeddata,
    onClick: function onClick() {
      if (player.current) {
        player.current.pause();
        player.current.currentTime = 0;
      }
      setPlaying(false);
    },
    ref: stopRef
  }, /*#__PURE__*/React.createElement(Stop, null)), /*#__PURE__*/React.createElement(ControlBtn, {
    disabled: !loadeddata,
    onClick: function onClick() {
      var _player$current7;
      player === null || player === void 0 || (_player$current7 = player.current) === null || _player$current7 === void 0 || _player$current7.requestFullscreen();
    },
    ref: fullScreenRef
  }, /*#__PURE__*/React.createElement(Fullscreen, null)), /*#__PURE__*/React.createElement(VideoRange, {
    ref: progressRef,
    min: "0",
    max: "100",
    step: "1",
    value: progress,
    style: {
      width: '70%',
      marginLeft: 20
    },
    onChange: function onChange(_ref6) {
      var target = _ref6.target;
      var video = player.current;
      if (video) {
        var _value = parseInt(target.value);
        var percent = _value / 100;
        video.currentTime = percent * video.duration;
        setProgress(_value);
      }
    }
  }))));
};
var Video = /*#__PURE__*/React.forwardRef(VideoRenderer);
export default Video;