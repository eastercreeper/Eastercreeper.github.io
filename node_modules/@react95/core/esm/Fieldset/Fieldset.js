var _excluded = ["legend", "children"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import styled, { th } from '@xstyled/styled-components';
var Field = styled.fieldset.withConfig({
  displayName: "Fieldset__Field",
  componentId: "sc-15a7lpx-0"
})(["\n  border-top-style: groove;\n  border-top-width: 2;\n  border-top-color: borderLighter;\n\n  border-left-style: groove;\n  border-left-width: 2;\n  border-left-color: borderLighter;\n\n  border-bottom-style: solid;\n  border-bottom-width: 1;\n  border-bottom-color: borderDark;\n\n  border-right-style: solid;\n  border-right-width: 1;\n  border-right-color: borderDark;\n\n  box-shadow: 1px 1px 0 0 ", ";\n"], th('colors.borderLighter'));
var Legend = styled.legend.withConfig({
  displayName: "Fieldset__Legend",
  componentId: "sc-15a7lpx-1"
})(["\n  padding-left: 4px;\n  padding-right: 1px;\n"]);
var Fieldset = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var legend = _ref.legend,
    children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(Field, _extends({}, rest, {
    ref: ref
  }), legend && /*#__PURE__*/React.createElement(Legend, null, legend), children);
});
export default Fieldset;