import { css } from 'styled-components';
import { scrollBarBorder } from './Borders';
export var createTriangleSVG = function createTriangleSVG(color) {
  var angle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var svg = "<svg height=\"21\" width=\"21\" viewBox=\"0 0 21 21\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <g transform=\"rotate(".concat(angle, " 13 13)\">\n      <polygon fill=\"").concat(color, "\" points=\"6,10 20,10 13,17\"/>\n    </g>\n  </svg>");
  var encoded = typeof window != 'undefined' ? window.btoa(svg) : '';
  return "url(data:image/svg+xml;base64,".concat(encoded, ")");
};

// TODO for flat box styles add checkered background when disabled (not solid color)
export var createHatchedBackground = function createHatchedBackground(_ref) {
  var _ref$mainColor = _ref.mainColor,
    mainColor = _ref$mainColor === void 0 ? 'black' : _ref$mainColor,
    _ref$secondaryColor = _ref.secondaryColor,
    secondaryColor = _ref$secondaryColor === void 0 ? 'transparent' : _ref$secondaryColor,
    _ref$pixelSize = _ref.pixelSize,
    pixelSize = _ref$pixelSize === void 0 ? 2 : _ref$pixelSize;
  return css(["\n  background-image: ", ";\n  background-color: ", ";\n  background-size: ", ";\n  background-position: 0 0, ", ";\n"], ["linear-gradient(\n      45deg,\n      ".concat(mainColor, " 25%,\n      transparent 25%,\n      transparent 75%,\n      ").concat(mainColor, " 75%\n    )"), "linear-gradient(\n      45deg,\n      ".concat(mainColor, " 25%,\n      transparent 25%,\n      transparent 75%,\n      ").concat(mainColor, " 75%\n    )")].join(','), secondaryColor, "".concat(pixelSize * 2, "px ").concat(pixelSize * 2, "px"), "".concat(pixelSize, "px ").concat(pixelSize, "px"));
};
export var scrollbars = css(["\n  ::-webkit-scrollbar {\n    width: 17;\n    height: 17;\n  }\n  ::-webkit-scrollbar-track {\n    ", "\n  }\n  ::-webkit-scrollbar-thumb {\n    box-sizing: border-box;\n    display: inline-block;\n    background: ", ";\n    color: ", ";\n    ", "\n  }\n\n  ::-webkit-scrollbar-corner {\n    background-color: ", ";\n  }\n  ::-webkit-scrollbar-button {\n    box-sizing: border-box;\n    display: inline-block;\n    background: ", ";\n    color: ", ";\n    ", "\n    display: block;\n    outline-offset: -2px;\n    height: 17;\n    width: 17;\n    background-repeat: no-repeat;\n    background-size: 80%;\n    background-position: 0 0;\n  }\n  ::-webkit-scrollbar-button:active,\n  ::-webkit-scrollbar-button:active {\n    background-position: 0 1;\n    ", "\n  }\n\n  ::-webkit-scrollbar-button:horizontal:increment:start,\n  ::-webkit-scrollbar-button:horizontal:decrement:end,\n  ::-webkit-scrollbar-button:vertical:increment:start,\n  ::-webkit-scrollbar-button:vertical:decrement:end {\n    display: none;\n  }\n\n  ::-webkit-scrollbar-button:horizontal:decrement {\n    background-image: ", ";\n  }\n\n  ::-webkit-scrollbar-button:horizontal:increment {\n    background-image: ", ";\n  }\n\n  ::-webkit-scrollbar-button:vertical:decrement {\n    background-image: ", ";\n  }\n\n  ::-webkit-scrollbar-button:vertical:increment {\n    background-image: ", ";\n  }\n"], function (_ref2) {
  var theme = _ref2.theme;
  return createHatchedBackground({
    mainColor: theme.colors.material,
    secondaryColor: theme.colors.borderLightest
  });
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.colors.material;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.colors.materialText;
}, scrollBarBorder(), function (_ref5) {
  var theme = _ref5.theme;
  return theme.colors.material;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.colors.material;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.colors.materialText;
}, scrollBarBorder(), scrollBarBorder(), function (_ref8) {
  var theme = _ref8.theme;
  return createTriangleSVG(theme.colors.materialText, 90);
}, function (_ref9) {
  var theme = _ref9.theme;
  return createTriangleSVG(theme.colors.materialText, 270);
}, function (_ref10) {
  var theme = _ref10.theme;
  return createTriangleSVG(theme.colors.materialText, 180);
}, function (_ref11) {
  var theme = _ref11.theme;
  return createTriangleSVG(theme.colors.materialText, 0);
});