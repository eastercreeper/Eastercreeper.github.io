{"ast":null,"code":"import * as React from 'react';\nimport { useMemo } from 'react';\nimport { getScreens, system, getBreakpointMin, getBreakpointMax } from '@xstyled/system';\nimport { obj, string, func, cascade } from '@xstyled/util';\nfunction useThemeScreens(theme) {\n  return getScreens({\n    theme\n  });\n}\nfunction useThemeMinValue(theme, key) {\n  const screens = useThemeScreens(theme);\n  const value = screens[key];\n  return value === 0 ? null : value;\n}\nfunction useThemeMaxValue(theme, key) {\n  const screens = useThemeScreens(theme);\n  const breakPoint = screens[key];\n  return breakPoint === 0 ? null : breakPoint - 0.02;\n}\nfunction useViewportWidth() {\n  const [width, setWidth] = React.useState(typeof window === \"undefined\" ? null : window.innerWidth);\n  React.useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth);\n    }\n    window.addEventListener(\"resize\", handleResize);\n    setWidth(window.innerWidth);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return width;\n}\nfunction useThemeBreakpoint(theme) {\n  const screns = useThemeScreens(theme);\n  const width = useViewportWidth();\n  return React.useMemo(() => {\n    return Object.keys(screns).reverse().find(screen => width !== null && width > screns[screen]) || null;\n  }, [screns, width]);\n}\nfunction useThemeUp(theme, key) {\n  const value = useThemeMinValue(theme, key);\n  const width = useViewportWidth();\n  return width !== null && value !== null && width >= value;\n}\nfunction useThemeDown(theme, key) {\n  const value = useThemeMaxValue(theme, key);\n  const width = useViewportWidth();\n  return width !== null && value !== null && width < value;\n}\nconst join = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args.filter(Boolean).join(\".\");\n};\nconst toVarName = key => \"--\".concat(key.replace(/\\./g, \"-\"));\nconst toVarValue = (key, value) => \"var(\".concat(toVarName(key), \", \").concat(value, \")\");\nconst toProp = (key, value) => \"\".concat(key, \": \").concat(value, \";\");\nfunction toCustomPropertiesReferences(values, theme) {\n  let keys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Object.keys(values);\n  let parent = arguments.length > 3 ? arguments[3] : undefined;\n  const next = Array.isArray(values) ? [] : {};\n  for (const i in keys) {\n    const key = keys[i];\n    const value = values[key];\n    const name = join(parent, key);\n    if (obj(value)) {\n      next[key] = toCustomPropertiesReferences(value, theme, Object.keys(value), name);\n      continue;\n    }\n    if (string(value)) {\n      next[key] = toVarValue(name, value);\n      continue;\n    }\n    if (func(value)) {\n      next[key] = toVarValue(name, cascade(value, {\n        theme\n      }));\n      continue;\n    }\n  }\n  return next;\n}\nfunction toCustomPropertiesDeclarations(values, theme) {\n  let keys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Object.keys(values);\n  let parent = arguments.length > 3 ? arguments[3] : undefined;\n  let state = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n    value: \"\"\n  };\n  for (const i in keys) {\n    const key = keys[i];\n    const value = values[key];\n    const name = join(parent, key);\n    if (obj(value)) {\n      toCustomPropertiesDeclarations(value, theme, Object.keys(value), name, state);\n      continue;\n    }\n    if (string(value)) {\n      state.value += toProp(toVarName(name), value);\n      continue;\n    }\n    if (func(value)) {\n      state.value += toProp(toVarName(name), cascade(value, {\n        theme\n      }));\n      continue;\n    }\n  }\n  return state.value;\n}\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nconst STORAGE_KEY = \"xstyled-color-mode\";\nconst isLocalStorageAvailable = typeof window !== \"undefined\" && (() => {\n  try {\n    const key = \"xstyled-test-key\";\n    window.localStorage.setItem(key, key);\n    window.localStorage.removeItem(key);\n    return true;\n  } catch (err) {\n    return false;\n  }\n})();\nconst storage = isLocalStorageAvailable ? {\n  get: () => window.localStorage.getItem(STORAGE_KEY),\n  set: value => {\n    window.localStorage.setItem(STORAGE_KEY, value);\n  },\n  clear: () => window.localStorage.removeItem(STORAGE_KEY)\n} : {\n  get: () => null,\n  set: () => {},\n  clear: () => {}\n};\nconst COLOR_MODE_CLASS_PREFIX = \"xstyled-color-mode-\";\nconst getColorModeClassName = mode => \"\".concat(COLOR_MODE_CLASS_PREFIX).concat(mode);\nconst XSTYLED_COLORS_PREFIX = \"xstyled-colors\";\nconst SYSTEM_MODES = [\"light\", \"dark\"];\nfunction getModeTheme(theme, mode) {\n  return __spreadProps(__spreadValues({}, theme), {\n    colors: __spreadValues(__spreadValues({}, theme.colors), theme.colors.modes[mode])\n  });\n}\nconst getMediaQuery = query => \"@media \".concat(query);\nconst getColorModeQuery = mode => \"(prefers-color-scheme: \".concat(mode, \")\");\nfunction checkHasColorModes(theme) {\n  return Boolean(theme && theme.colors && theme.colors.modes);\n}\nfunction checkHasCustomPropertiesEnabled(theme) {\n  return Boolean(theme && (theme.useCustomProperties === void 0 || theme.useCustomProperties));\n}\nfunction checkHasMediaQueryEnabled(theme) {\n  return Boolean(theme && (theme.useColorSchemeMediaQuery === void 0 || theme.useColorSchemeMediaQuery));\n}\nfunction getInitialColorModeName(theme) {\n  return theme.initialColorModeName || \"default\";\n}\nfunction getDefaultColorModeName(theme) {\n  return theme.defaultColorModeName || getInitialColorModeName(theme);\n}\nfunction getUsedColorKeys(modes) {\n  let keys = [];\n  for (const key in modes) {\n    keys = [...keys, ...Object.keys(modes[key])];\n  }\n  return keys;\n}\nfunction createColorStyles(theme) {\n  let {\n    targetSelector = \"body\"\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!checkHasColorModes(theme)) return null;\n  const _a = theme.colors,\n    {\n      modes\n    } = _a,\n    colors = __objRest(_a, [\"modes\"]);\n  const colorKeys = getUsedColorKeys(modes);\n  let styles = toCustomPropertiesDeclarations(colors, theme, colorKeys, XSTYLED_COLORS_PREFIX);\n  function getModePropertiesDeclarations(mode) {\n    const modeTheme = getModeTheme(theme, mode);\n    const _a2 = modeTheme.colors,\n      {\n        modes: modes2\n      } = _a2,\n      colors2 = __objRest(_a2, [\"modes\"]);\n    return toCustomPropertiesDeclarations(__spreadValues(__spreadValues({}, colors2), modes2[mode]), modeTheme, colorKeys, XSTYLED_COLORS_PREFIX);\n  }\n  if (theme.useColorSchemeMediaQuery !== false) {\n    SYSTEM_MODES.forEach(mode => {\n      if (modes[mode]) {\n        const mediaQuery = getMediaQuery(getColorModeQuery(mode));\n        styles += \"\".concat(mediaQuery, \"{\").concat(getModePropertiesDeclarations(mode), \"}\");\n      }\n    });\n  }\n  const initialModeName = getInitialColorModeName(theme);\n  [initialModeName, ...Object.keys(modes)].forEach(mode => {\n    const key = \"&.\".concat(getColorModeClassName(mode));\n    styles += \"\".concat(key, \"{\").concat(getModePropertiesDeclarations(mode), \"}\");\n  });\n  return \"\".concat(targetSelector, \"{\").concat(styles, \"}\");\n}\nfunction getSystemModeMql(mode) {\n  if (typeof window === \"undefined\" || window.matchMedia === void 0) {\n    return null;\n  }\n  const query = getColorModeQuery(mode);\n  return window.matchMedia(query);\n}\nfunction useSystemMode(theme) {\n  const configs = React.useMemo(() => {\n    if (!checkHasMediaQueryEnabled(theme)) return [];\n    return SYSTEM_MODES.map(mode => {\n      if (!checkHasColorModes(theme)) return null;\n      if (!theme.colors.modes[mode]) return null;\n      const mql = getSystemModeMql(mode);\n      return mql ? {\n        mode,\n        mql\n      } : null;\n    }).filter(Boolean);\n  }, [theme]);\n  const [systemMode, setSystemMode] = React.useState(() => {\n    const config = configs.find(config2 => config2.mql.matches);\n    return config ? config.mode : null;\n  });\n  React.useEffect(() => {\n    const cleans = configs.map(_ref => {\n      let {\n        mode,\n        mql\n      } = _ref;\n      const handler = _ref2 => {\n        let {\n          matches\n        } = _ref2;\n        if (matches) {\n          setSystemMode(mode);\n        } else {\n          setSystemMode(previousMode => previousMode === mode ? null : mode);\n        }\n      };\n      mql.addEventListener(\"change\", handler);\n      return () => mql.removeEventListener(\"change\", handler);\n    });\n    return () => cleans.forEach(clean => clean());\n  });\n  return systemMode;\n}\nconst useIsomorphicLayoutEffect = typeof window !== \"undefined\" ? React.useLayoutEffect : React.useEffect;\nfunction useColorModeState(theme) {\n  let {\n    target\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const systemMode = useSystemMode(theme);\n  const defaultColorMode = getDefaultColorModeName(theme);\n  const initialColorMode = getInitialColorModeName(theme);\n  const [mode, setMode] = React.useState(() => {\n    if (!checkHasColorModes(theme)) return null;\n    return defaultColorMode;\n  });\n  const customPropertiesEnabled = checkHasCustomPropertiesEnabled(theme);\n  const manuallySetMode = React.useCallback(value => {\n    setMode(value || null);\n    if (value) {\n      storage.set(value);\n    } else {\n      storage.clear();\n    }\n  }, []);\n  useIsomorphicLayoutEffect(() => {\n    if (!checkHasColorModes(theme)) return;\n    const storedMode = storage.get();\n    const initialMode = storedMode || systemMode || defaultColorMode;\n    if (mode !== initialMode) {\n      setMode(storedMode || systemMode || defaultColorMode);\n    }\n  }, []);\n  useIsomorphicLayoutEffect(() => {\n    const storedMode = storage.get();\n    if (storedMode) return;\n    const targetMode = systemMode || defaultColorMode;\n    if (targetMode === mode) return;\n    setMode(targetMode);\n  }, [mode, systemMode, defaultColorMode]);\n  useIsomorphicLayoutEffect(() => {\n    if (!mode) return void 0;\n    if (!customPropertiesEnabled) return void 0;\n    const stored = storage.get();\n    const initial = initialColorMode !== mode;\n    if (!stored && !initial) return void 0;\n    const className = getColorModeClassName(mode);\n    const usedTarget = target || document.body;\n    usedTarget.classList.add(className);\n    return () => {\n      usedTarget.classList.remove(className);\n    };\n  }, [customPropertiesEnabled, target, mode, initialColorMode]);\n  return [mode, manuallySetMode];\n}\nfunction useColorModeTheme(theme, mode) {\n  const [initialMode] = React.useState(mode);\n  const customPropertiesTheme = React.useMemo(() => {\n    if (!initialMode) return null;\n    if (!checkHasCustomPropertiesEnabled(theme)) return null;\n    if (!checkHasColorModes(theme)) return theme;\n    const _a = theme.colors,\n      {\n        modes\n      } = _a,\n      colors = __objRest(_a, [\"modes\"]);\n    const colorKeys = getUsedColorKeys(modes);\n    return __spreadProps(__spreadValues({}, theme), {\n      colors: __spreadProps(__spreadValues(__spreadValues({}, colors), toCustomPropertiesReferences(colors, theme, colorKeys, XSTYLED_COLORS_PREFIX)), {\n        modes\n      }),\n      __rawColors: theme.colors\n    });\n  }, [initialMode, theme]);\n  const swapModeTheme = React.useMemo(() => {\n    if (!mode) return null;\n    if (checkHasCustomPropertiesEnabled(theme)) return null;\n    if (!checkHasColorModes(theme)) return theme;\n    if (mode === getInitialColorModeName(theme)) {\n      return __spreadProps(__spreadValues({}, theme), {\n        __colorMode: mode\n      });\n    }\n    return __spreadProps(__spreadValues({}, theme), {\n      colors: __spreadValues(__spreadValues({}, theme.colors), theme.colors.modes[mode]),\n      __colorMode: mode,\n      __rawColors: theme.colors\n    });\n  }, [theme, mode]);\n  return customPropertiesTheme || swapModeTheme;\n}\nconst ColorModeContext = React.createContext(null);\nfunction useColorMode() {\n  const colorModeState = React.useContext(ColorModeContext);\n  if (!colorModeState) {\n    throw new Error(\"[useColorMode] requires the ColorModeProvider component\");\n  }\n  return colorModeState;\n}\nfunction createColorModeProvider(_ref3) {\n  let {\n    ThemeContext,\n    ThemeProvider,\n    ColorModeStyle\n  } = _ref3;\n  function ColorModeProvider(_ref4) {\n    let {\n      children,\n      target,\n      targetSelector\n    } = _ref4;\n    const theme = React.useContext(ThemeContext);\n    if (!theme) {\n      throw new Error(\"[ColorModeProvider] requires ThemeProvider upper in the tree\");\n    }\n    const colorState = useColorModeState(theme, {\n      target\n    });\n    const colorModeTheme = useColorModeTheme(theme, colorState[0]);\n    return /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement(ColorModeStyle, {\n      targetSelector\n    }), /* @__PURE__ */React.createElement(ThemeProvider, {\n      theme: colorModeTheme\n    }, /* @__PURE__ */React.createElement(ColorModeContext.Provider, {\n      value: colorState\n    }, children)));\n  }\n  return ColorModeProvider;\n}\nfunction getInitScript() {\n  let {\n    target = \"document.body\"\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return \"(function() { try {\\n    var mode = localStorage.getItem('\".concat(STORAGE_KEY, \"');\\n    if (mode) \").concat(target, \".classList.add('\").concat(COLOR_MODE_CLASS_PREFIX, \"' + mode);\\n  } catch (e) {} })();\");\n}\nfunction getColorModeInitScriptElement(options) {\n  return /* @__PURE__ */React.createElement(\"script\", {\n    key: \"xstyled-color-mode-init\",\n    dangerouslySetInnerHTML: {\n      __html: getInitScript(options)\n    }\n  });\n}\nfunction getColorModeInitScriptTag(options) {\n  return \"<script>\".concat(getInitScript(options), \"</script>\");\n}\nfunction createBox() {\n  return [\"&&{\", system, \"}\"];\n}\ncreateBox.meta = system.meta;\nconst getMediaWidth = getBreakpointBound => value => props => {\n  const v = getBreakpointBound(getScreens(props), value);\n  return v === null ? \"0\" : v || value;\n};\nconst mediaGetters = {\n  \"min-width\": getMediaWidth(getBreakpointMin),\n  \"max-width\": getMediaWidth(getBreakpointMax)\n};\nconst PROP_CHAR = \"[-\\\\w]\";\nconst VALUE_CHAR = \"(?:\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\;{}])\";\nconst PROP_PATT = \"(\".concat(PROP_CHAR, \"+)(\\\\s*:\\\\s*)(?=\\\\S)(\").concat(VALUE_CHAR, \"*?)(\\\\s*!important)?(\\\\s*;)\");\nconst MEDIA_CHAR = \"[^{]\";\nconst MEDIA_PATT = \"(@media\\\\b\\\\s*)(?=\\\\S)(\".concat(MEDIA_CHAR, \"+?)(\\\\s*\\\\{)\");\nconst MATCH_REGEXP = new RegExp(\"(?:\".concat(PROP_PATT, \"|\").concat(MEDIA_PATT, \")\"), \"g\");\nconst QUERY_REGEXP = new RegExp(\"(\\\\(\\\\s*)(\".concat(PROP_CHAR, \"+)(\\\\s*:\\\\s*)([^\\\\)]*?)(\\\\s*\\\\))\"), \"g\");\nconst mediaTransform = rawValue => {\n  let matches;\n  let lastIndex = 0;\n  const values = [];\n  while (matches = QUERY_REGEXP.exec(rawValue)) {\n    const [, open, prop, colon, value, close] = matches;\n    const getter = mediaGetters[prop];\n    if (getter) {\n      values.push(rawValue.slice(lastIndex, matches.index));\n      values.push(p => \"\".concat(open).concat(prop).concat(colon).concat(getter(value)(p)).concat(close));\n      lastIndex = matches.index + matches[0].length;\n    }\n  }\n  values.push(rawValue.slice(lastIndex, rawValue.length));\n  return values;\n};\nconst createTransform = generator => rawValue => {\n  if (typeof rawValue !== \"string\") return rawValue;\n  let matches;\n  let lastIndex = 0;\n  const values = [];\n  while (matches = MATCH_REGEXP.exec(rawValue)) {\n    const [, prop, colon, value, imp, semi, media, query, brace] = matches;\n    if (media) {\n      values.push(rawValue.slice(lastIndex, matches.index));\n      values.push(media);\n      mediaTransform(query).forEach(v => values.push(v));\n      values.push(brace);\n      lastIndex = matches.index + matches[0].length;\n    } else {\n      const getter = generator.meta.cssGetters[prop];\n      if (getter) {\n        values.push(rawValue.slice(lastIndex, matches.index));\n        values.push(p => \"\".concat(prop).concat(colon).concat(getter(value)(p)).concat(imp || \"\").concat(semi));\n        lastIndex = matches.index + matches[0].length;\n      }\n    }\n  }\n  values.push(rawValue.slice(lastIndex, rawValue.length));\n  return values;\n};\nconst createUseGetter = (getter, useTheme) => (value, defaultValue) => {\n  const theme = useTheme();\n  return useMemo(() => getter(value, defaultValue)({\n    theme\n  }), [value, defaultValue, theme]);\n};\nexport { ColorModeContext, createBox, createColorModeProvider, createColorStyles, createTransform, createUseGetter, getColorModeInitScriptElement, getColorModeInitScriptTag, useColorMode, useColorModeState, useColorModeTheme, useThemeBreakpoint, useThemeDown, useThemeScreens, useThemeUp, useViewportWidth };","map":{"version":3,"names":["useThemeScreens","theme","getScreens","useThemeMinValue","key","screens","value","useThemeMaxValue","breakPoint","useViewportWidth","width","setWidth","React","useState","window","innerWidth","useEffect","handleResize","addEventListener","removeEventListener","useThemeBreakpoint","screns","useMemo","Object","keys","reverse","find","screen","useThemeUp","useThemeDown","join","_len","arguments","length","args","Array","_key","filter","Boolean","toVarName","concat","replace","toVarValue","toProp","toCustomPropertiesReferences","values","undefined","parent","next","isArray","i","name","obj","string","func","cascade","toCustomPropertiesDeclarations","state","STORAGE_KEY","isLocalStorageAvailable","localStorage","setItem","removeItem","err","storage","get","getItem","set","clear","COLOR_MODE_CLASS_PREFIX","getColorModeClassName","mode","XSTYLED_COLORS_PREFIX","SYSTEM_MODES","getModeTheme","__spreadProps","__spreadValues","colors","modes","getMediaQuery","query","getColorModeQuery","checkHasColorModes","checkHasCustomPropertiesEnabled","useCustomProperties","checkHasMediaQueryEnabled","useColorSchemeMediaQuery","getInitialColorModeName","initialColorModeName","getDefaultColorModeName","defaultColorModeName","getUsedColorKeys","createColorStyles","targetSelector","_a","__objRest","colorKeys","styles","getModePropertiesDeclarations","modeTheme","_a2","modes2","colors2","forEach","mediaQuery","initialModeName","getSystemModeMql","matchMedia","useSystemMode","configs","map","mql","systemMode","setSystemMode","config","config2","matches","cleans","_ref","handler","_ref2","previousMode","clean","useIsomorphicLayoutEffect","useLayoutEffect","useColorModeState","target","defaultColorMode","initialColorMode","setMode","customPropertiesEnabled","manuallySetMode","useCallback","storedMode","initialMode","targetMode","stored","initial","className","usedTarget","document","body","classList","add","remove","useColorModeTheme","customPropertiesTheme","__rawColors","swapModeTheme","__colorMode","ColorModeContext","createContext","useColorMode","colorModeState","useContext","Error","createColorModeProvider","_ref3","ThemeContext","ThemeProvider","ColorModeStyle","ColorModeProvider","_ref4","children","colorState","colorModeTheme","createElement","Fragment","Provider","getInitScript","getColorModeInitScriptElement","options","dangerouslySetInnerHTML","__html","getColorModeInitScriptTag","createBox","system","meta","getMediaWidth","getBreakpointBound","props","v","mediaGetters","getBreakpointMin","getBreakpointMax","PROP_CHAR","VALUE_CHAR","PROP_PATT","MEDIA_CHAR","MEDIA_PATT","MATCH_REGEXP","RegExp","QUERY_REGEXP","mediaTransform","rawValue","lastIndex","exec","open","prop","colon","close","getter","push","slice","index","p","createTransform","generator","imp","semi","media","brace","cssGetters","createUseGetter","useTheme","defaultValue"],"sources":["C:\\Users\\natha\\OneDrive\\Desktop\\website\\node_modules\\@xstyled\\core\\src\\breakpoints.ts","C:\\Users\\natha\\OneDrive\\Desktop\\website\\node_modules\\@xstyled\\core\\src\\customProperties.ts","C:\\Users\\natha\\OneDrive\\Desktop\\website\\node_modules\\@xstyled\\core\\src\\colorModes.tsx","C:\\Users\\natha\\OneDrive\\Desktop\\website\\node_modules\\@xstyled\\core\\src\\createBox.ts","C:\\Users\\natha\\OneDrive\\Desktop\\website\\node_modules\\@xstyled\\core\\src\\mediaGetters.ts","C:\\Users\\natha\\OneDrive\\Desktop\\website\\node_modules\\@xstyled\\core\\src\\transform.ts","C:\\Users\\natha\\OneDrive\\Desktop\\website\\node_modules\\@xstyled\\core\\src\\theme.ts"],"sourcesContent":["/* eslint-disable no-undef */\nimport * as React from 'react'\nimport { getScreens, ITheme, Screens } from '@xstyled/system'\n\nexport function useThemeScreens(theme: ITheme): Screens {\n  return getScreens({ theme })\n}\n\n/**\n * Minimum breakpoint width.\n * Null for the smallest breakpoint.\n */\nfunction useThemeMinValue(theme: ITheme, key: string | number): number | null {\n  const screens = useThemeScreens(theme)\n  const value = screens[key]\n  return value === 0 ? null : value\n}\n\n/**\n * Maximum breakpoint width. Null for the largest (last) breakpoint.\n * The maximum value is calculated as the minimum of the next one less 0.02px\n * to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n * See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n * Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n * See https://bugs.webkit.org/show_bug.cgi?id=178261\n */\nfunction useThemeMaxValue(theme: ITheme, key: string | number): number | null {\n  const screens = useThemeScreens(theme)\n  const breakPoint = screens[key]\n  return breakPoint === 0 ? null : breakPoint - 0.02\n}\n\nexport function useViewportWidth(): number | null {\n  const [width, setWidth] = React.useState(\n    typeof window === 'undefined' ? null : window.innerWidth,\n  )\n\n  React.useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth)\n    }\n\n    // Add the listener, then setWidth to avoid race.\n    window.addEventListener('resize', handleResize)\n    setWidth(window.innerWidth)\n\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  return width\n}\n\nexport function useThemeBreakpoint(theme: ITheme): string | null {\n  const screns = useThemeScreens(theme)\n  const width = useViewportWidth()\n  return React.useMemo(() => {\n    return (\n      Object.keys(screns)\n        .reverse()\n        .find((screen) => width !== null && width > screns[screen]) || null\n    )\n  }, [screns, width])\n}\n\nexport function useThemeUp(theme: ITheme, key: string | number): boolean {\n  const value = useThemeMinValue(theme, key)\n  const width = useViewportWidth()\n  return width !== null && value !== null && width >= value\n}\n\nexport function useThemeDown(theme: ITheme, key: string | number): boolean {\n  const value = useThemeMaxValue(theme, key)\n  const width = useViewportWidth()\n  return width !== null && value !== null && width < value\n}\n","import { obj, string, func, cascade } from '@xstyled/util'\nimport { ITheme } from '@xstyled/system'\n\nconst join = (...args: (string | undefined)[]): string =>\n  args.filter(Boolean).join('.')\n\nconst toVarName = (key: string): string => `--${key.replace(/\\./g, '-')}`\nconst toVarValue = (key: string, value: string): string =>\n  `var(${toVarName(key)}, ${value})`\nconst toProp = (key: string, value: string): string => `${key}: ${value};`\n\nexport function toCustomPropertiesReferences<\n  T extends Record<string | number, unknown>,\n>(\n  values: T,\n  theme?: ITheme,\n  keys: string[] = Object.keys(values),\n  parent?: string,\n): Record<string | number, unknown> {\n  const next: Record<string | number, unknown> = Array.isArray(values)\n    ? ([] as Record<number, string>)\n    : ({} as Record<string, string>)\n\n  for (const i in keys) {\n    const key = keys[i]\n    const value = values[key]\n    const name = join(parent, key)\n    if (obj(value)) {\n      next[key] = toCustomPropertiesReferences(\n        value as { [key: string]: unknown },\n        theme,\n        Object.keys(value),\n        name,\n      )\n      continue\n    }\n    if (string(value)) {\n      next[key] = toVarValue(name, value)\n      continue\n    }\n    if (func(value)) {\n      next[key] = toVarValue(name, cascade(value, { theme }))\n      continue\n    }\n  }\n\n  return next\n}\n\nexport function toCustomPropertiesDeclarations(\n  values: { [key: string]: unknown },\n  theme?: ITheme,\n  keys: string[] = Object.keys(values),\n  parent?: string,\n  state = { value: '' },\n): string {\n  for (const i in keys) {\n    const key = keys[i]\n    const value = values[key]\n    const name = join(parent, key)\n    if (obj(value)) {\n      toCustomPropertiesDeclarations(\n        value as { [key: string]: unknown },\n        theme,\n        Object.keys(value),\n        name,\n        state,\n      )\n      continue\n    }\n    if (string(value)) {\n      state.value += toProp(toVarName(name), value)\n      continue\n    }\n    if (func(value)) {\n      state.value += toProp(toVarName(name), cascade(value, { theme }))\n      continue\n    }\n  }\n\n  return state.value\n}\n","/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable react/no-danger */\n/* eslint-env browser */\nimport * as React from 'react'\nimport { Colors } from '@xstyled/system'\nimport {\n  toCustomPropertiesDeclarations,\n  toCustomPropertiesReferences,\n} from './customProperties'\n\ntype ColorModeState = [string | null, (mode: string | null) => void]\n\ninterface ColorModes {\n  [key: string]: Colors\n}\n\ninterface ITheme {\n  useCustomProperties?: boolean\n  useColorSchemeMediaQuery?: boolean\n  initialColorModeName?: string\n  defaultColorModeName?: string\n  colors?: Colors & {\n    modes?: ColorModes\n  }\n}\n\ninterface IColorModeTheme extends ITheme {\n  colors: Colors & { modes: ColorModes }\n}\n\nconst STORAGE_KEY = 'xstyled-color-mode'\n\nconst isLocalStorageAvailable: boolean =\n  typeof window !== 'undefined' &&\n  (() => {\n    try {\n      const key = 'xstyled-test-key'\n      window.localStorage.setItem(key, key)\n      window.localStorage.removeItem(key)\n      return true\n    } catch (err) {\n      return false\n    }\n  })()\n\ninterface Storage {\n  get(): string | null\n  set(value: string): void\n  clear(): void\n}\n\nconst storage: Storage = isLocalStorageAvailable\n  ? {\n      get: () => window.localStorage.getItem(STORAGE_KEY),\n      set: (value: string) => {\n        window.localStorage.setItem(STORAGE_KEY, value)\n      },\n      clear: () => window.localStorage.removeItem(STORAGE_KEY),\n    }\n  : {\n      get: () => null,\n      set: () => {},\n      clear: () => {},\n    }\n\nconst COLOR_MODE_CLASS_PREFIX = 'xstyled-color-mode-'\nconst getColorModeClassName = (mode: string) =>\n  `${COLOR_MODE_CLASS_PREFIX}${mode}`\n\nconst XSTYLED_COLORS_PREFIX = 'xstyled-colors'\nconst SYSTEM_MODES = ['light', 'dark']\n\nfunction getModeTheme(theme: IColorModeTheme, mode: string): IColorModeTheme {\n  return {\n    ...theme,\n    colors: { ...theme.colors, ...theme.colors.modes[mode] },\n  }\n}\n\nconst getMediaQuery = (query: string): string => `@media ${query}`\nconst getColorModeQuery = (mode: string): string =>\n  `(prefers-color-scheme: ${mode})`\n\nfunction checkHasColorModes(theme: ITheme | null): theme is IColorModeTheme {\n  return Boolean(theme && theme.colors && theme.colors.modes)\n}\n\nfunction checkHasCustomPropertiesEnabled(theme: ITheme | null): boolean {\n  return Boolean(\n    theme &&\n      (theme.useCustomProperties === undefined || theme.useCustomProperties),\n  )\n}\n\nfunction checkHasMediaQueryEnabled(theme: ITheme | null): boolean {\n  return Boolean(\n    theme &&\n      (theme.useColorSchemeMediaQuery === undefined ||\n        theme.useColorSchemeMediaQuery),\n  )\n}\n\nfunction getInitialColorModeName(theme: ITheme): string {\n  return theme.initialColorModeName || 'default'\n}\n\nfunction getDefaultColorModeName(theme: ITheme): string {\n  return theme.defaultColorModeName || getInitialColorModeName(theme)\n}\n\nfunction getUsedColorKeys(modes: ColorModes) {\n  let keys: string[] = []\n  for (const key in modes) {\n    keys = [...keys, ...Object.keys(modes[key])]\n  }\n  return keys\n}\n\nexport function createColorStyles(\n  theme: ITheme,\n  { targetSelector = 'body' } = {},\n): string | null {\n  if (!checkHasColorModes(theme)) return null\n\n  const { modes, ...colors } = theme.colors\n  const colorKeys = getUsedColorKeys(modes)\n\n  let styles = toCustomPropertiesDeclarations(\n    colors,\n    theme,\n    colorKeys,\n    XSTYLED_COLORS_PREFIX,\n  )\n\n  function getModePropertiesDeclarations(mode: string) {\n    const modeTheme = getModeTheme(theme as IColorModeTheme, mode)\n    const { modes, ...colors } = modeTheme.colors\n    return toCustomPropertiesDeclarations(\n      { ...colors, ...modes[mode] },\n      modeTheme,\n      colorKeys,\n      XSTYLED_COLORS_PREFIX,\n    )\n  }\n\n  if (theme.useColorSchemeMediaQuery !== false) {\n    SYSTEM_MODES.forEach((mode) => {\n      if (modes[mode]) {\n        const mediaQuery = getMediaQuery(getColorModeQuery(mode))\n        styles += `${mediaQuery}{${getModePropertiesDeclarations(mode)}}`\n      }\n    })\n  }\n\n  const initialModeName = getInitialColorModeName(theme)\n  ;[initialModeName, ...Object.keys(modes)].forEach((mode) => {\n    const key = `&.${getColorModeClassName(mode)}`\n    styles += `${key}{${getModePropertiesDeclarations(mode)}}`\n  })\n\n  return `${targetSelector}{${styles}}`\n}\n\nfunction getSystemModeMql(mode: string) {\n  if (typeof window === 'undefined' || window.matchMedia === undefined) {\n    return null\n  }\n  const query = getColorModeQuery(mode)\n  return window.matchMedia(query)\n}\n\nfunction useSystemMode(theme: ITheme) {\n  const configs: { mode: string; mql: MediaQueryList }[] = React.useMemo(() => {\n    if (!checkHasMediaQueryEnabled(theme)) return []\n    return SYSTEM_MODES.map((mode) => {\n      if (!checkHasColorModes(theme)) return null\n      if (!theme.colors.modes[mode]) return null\n      const mql = getSystemModeMql(mode)\n      return mql ? { mode, mql } : null\n    }).filter(Boolean) as { mode: string; mql: MediaQueryList }[]\n  }, [theme])\n\n  const [systemMode, setSystemMode] = React.useState(() => {\n    const config = configs.find((config) => config.mql.matches)\n    return config ? config.mode : null\n  })\n\n  React.useEffect(() => {\n    const cleans = configs.map(({ mode, mql }) => {\n      const handler = ({ matches }: MediaQueryListEvent) => {\n        if (matches) {\n          setSystemMode(mode)\n        } else {\n          setSystemMode((previousMode) => (previousMode === mode ? null : mode))\n        }\n      }\n      mql.addEventListener('change', handler)\n      return () => mql.removeEventListener('change', handler)\n    })\n    return () => cleans.forEach((clean) => clean())\n  })\n\n  return systemMode\n}\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useColorModeState(\n  theme: ITheme,\n  { target }: { target?: Element } = {},\n): ColorModeState {\n  const systemMode = useSystemMode(theme)\n  const defaultColorMode = getDefaultColorModeName(theme)\n  const initialColorMode = getInitialColorModeName(theme)\n  const [mode, setMode] = React.useState(() => {\n    if (!checkHasColorModes(theme)) return null\n    return defaultColorMode\n  })\n\n  // Add mode className\n  const customPropertiesEnabled = checkHasCustomPropertiesEnabled(theme)\n\n  const manuallySetMode = React.useCallback((value: string | null) => {\n    setMode(value || null)\n    if (value) {\n      storage.set(value)\n    } else {\n      storage.clear()\n    }\n  }, [])\n\n  // Set initial color mode in lazy\n  useIsomorphicLayoutEffect(() => {\n    if (!checkHasColorModes(theme)) return\n    const storedMode = storage.get()\n    const initialMode = storedMode || systemMode || defaultColorMode\n    if (mode !== initialMode) {\n      setMode(storedMode || systemMode || defaultColorMode)\n    }\n  }, [])\n\n  // Sync system mode\n  useIsomorphicLayoutEffect(() => {\n    const storedMode = storage.get()\n    if (storedMode) return\n    const targetMode = systemMode || defaultColorMode\n    if (targetMode === mode) return\n    setMode(targetMode)\n  }, [mode, systemMode, defaultColorMode])\n\n  // Add and remove class names\n  useIsomorphicLayoutEffect(() => {\n    if (!mode) return undefined\n    if (!customPropertiesEnabled) return undefined\n    const stored = storage.get()\n    const initial = initialColorMode !== mode\n    if (!stored && !initial) return undefined\n    const className = getColorModeClassName(mode)\n    const usedTarget = target || document.body\n    usedTarget.classList.add(className)\n    return () => {\n      usedTarget.classList.remove(className)\n    }\n  }, [customPropertiesEnabled, target, mode, initialColorMode])\n\n  return [mode, manuallySetMode]\n}\n\nexport function useColorModeTheme(\n  theme: ITheme,\n  mode: string | null,\n): ITheme | null {\n  const [initialMode] = React.useState(mode)\n  const customPropertiesTheme = React.useMemo(() => {\n    if (!initialMode) return null\n    if (!checkHasCustomPropertiesEnabled(theme)) return null\n    if (!checkHasColorModes(theme)) return theme\n    const { modes, ...colors } = theme.colors\n    const colorKeys = getUsedColorKeys(modes)\n\n    return {\n      ...theme,\n      colors: {\n        ...colors,\n        ...toCustomPropertiesReferences(\n          colors,\n          theme,\n          colorKeys,\n          XSTYLED_COLORS_PREFIX,\n        ),\n        modes,\n      },\n      __rawColors: theme.colors,\n    }\n  }, [initialMode, theme])\n\n  const swapModeTheme = React.useMemo(() => {\n    if (!mode) return null\n    if (checkHasCustomPropertiesEnabled(theme)) return null\n    if (!checkHasColorModes(theme)) return theme\n\n    if (mode === getInitialColorModeName(theme)) {\n      return { ...theme, __colorMode: mode }\n    }\n\n    return {\n      ...theme,\n      colors: {\n        ...theme.colors,\n        ...theme.colors.modes[mode],\n      },\n      __colorMode: mode,\n      __rawColors: theme.colors,\n    }\n  }, [theme, mode])\n\n  return (customPropertiesTheme || swapModeTheme) as ITheme\n}\n\nexport const ColorModeContext = React.createContext<ColorModeState | null>(null)\n\nexport function useColorMode(): ColorModeState {\n  const colorModeState = React.useContext(ColorModeContext)\n\n  if (!colorModeState) {\n    throw new Error(`[useColorMode] requires the ColorModeProvider component`)\n  }\n\n  return colorModeState\n}\n\nexport interface ColorModeProviderProps {\n  children: React.ReactNode\n  target?: Element\n  targetSelector?: string\n}\n\nexport function createColorModeProvider({\n  ThemeContext,\n  ThemeProvider,\n  ColorModeStyle,\n}: {\n  ThemeContext: React.Context<any>\n  ThemeProvider: React.ComponentType<any>\n  ColorModeStyle: React.ComponentType<any>\n}): React.FC<ColorModeProviderProps> {\n  function ColorModeProvider({\n    children,\n    target,\n    targetSelector,\n  }: ColorModeProviderProps) {\n    const theme = React.useContext(ThemeContext)\n    if (!theme) {\n      throw new Error(\n        '[ColorModeProvider] requires ThemeProvider upper in the tree',\n      )\n    }\n    const colorState = useColorModeState(theme, { target })\n    const colorModeTheme = useColorModeTheme(theme, colorState[0])\n    return (\n      <>\n        <ColorModeStyle targetSelector={targetSelector} />\n        <ThemeProvider theme={colorModeTheme}>\n          <ColorModeContext.Provider value={colorState}>\n            {children}\n          </ColorModeContext.Provider>\n        </ThemeProvider>\n      </>\n    )\n  }\n  return ColorModeProvider\n}\n\ninterface GetInitScriptOptions {\n  target?: string\n}\n\nfunction getInitScript({\n  target = 'document.body',\n}: GetInitScriptOptions = {}) {\n  return `(function() { try {\n    var mode = localStorage.getItem('${STORAGE_KEY}');\n    if (mode) ${target}.classList.add('${COLOR_MODE_CLASS_PREFIX}' + mode);\n  } catch (e) {} })();`\n}\n\nexport function getColorModeInitScriptElement(\n  options?: GetInitScriptOptions,\n): JSX.Element {\n  return (\n    <script\n      key=\"xstyled-color-mode-init\"\n      dangerouslySetInnerHTML={{ __html: getInitScript(options) }}\n    />\n  )\n}\n\nexport function getColorModeInitScriptTag(\n  options?: GetInitScriptOptions,\n): string {\n  return `<script>${getInitScript(options)}</script>`\n}\n","import { system } from '@xstyled/system'\n\nexport function createBox(): (string | typeof system)[] {\n  return [`&&{`, system, `}`]\n}\ncreateBox.meta = system.meta\n","import { getScreens, getBreakpointMin, getBreakpointMax } from '@xstyled/system'\n\nconst getMediaWidth =\n  (getBreakpointBound: any) => (value: any) => (props: any) => {\n    const v = getBreakpointBound(getScreens(props), value)\n    // getters return null for smallest, undefined for not found, and otherwise\n    // a px string. Since we MUST emit a matcher at this point, use 0px for the\n    // smallest case (always true for min, never true for max).\n    return v === null ? '0' : v || value\n  }\n\nexport const mediaGetters = {\n  'min-width': getMediaWidth(getBreakpointMin),\n  'max-width': getMediaWidth(getBreakpointMax),\n}\n","/* eslint-disable no-continue, no-loop-func, no-cond-assign */\nimport type { StyleGenerator } from '@xstyled/system'\nimport { mediaGetters } from './mediaGetters'\n\n// prop name is an ident: word chars, underscore and dash.\nconst PROP_CHAR = `[-\\\\w]`\n\n// prop value consists of non-semis and no curly braces unless backslash-escaped.\n// This uses [\\s\\S] instead of . because IE11 doesn't support the s flag.\nconst VALUE_CHAR = `(?:\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\;{}])`\n\n// prettier-ignore\nconst PROP_PATT = (\n  `(${PROP_CHAR}+)` +   // capture prop name\n  `(\\\\s*:\\\\s*)` +       // colon & whitespace\n  `(?=\\\\S)` +           // prop value starts with non-whitespace\n  `(${VALUE_CHAR}*?)` + // capture prop value (non-greedy)\n  `(\\\\s*!important)?` + // capture !important\n  `(\\\\s*;)`             // semi & whitespace\n)\n\n// simplistic but workable media query value.\nconst MEDIA_CHAR = `[^{]`\n\n// prettier-ignore\nconst MEDIA_PATT = (\n  `(@media\\\\b\\\\s*)` +   // start of media query\n  `(?=\\\\S)` +           // value starts with non-whitespace\n  `(${MEDIA_CHAR}+?)` + // capture queries (non-greedy)\n  `(\\\\s*\\\\{)`           // brace & whitespace\n)\n\nconst MATCH_REGEXP = new RegExp(`(?:${PROP_PATT}|${MEDIA_PATT})`, `g`)\n\n// media query prop/value pairs such as (min-width: 1024px)\n// prettier-ignore\nconst QUERY_REGEXP = new RegExp(\n  `(\\\\(\\\\s*)` +       // open paren, whitespace\n  `(${PROP_CHAR}+)` + // capture prop name\n  `(\\\\s*:\\\\s*)` +     // colon & whitespace\n  `([^\\\\)]*?)` +      // capture prop value (non-greedy)\n  `(\\\\s*\\\\))`,        // close paren, whitespace\n  `g`\n)\n\nconst mediaTransform = (rawValue: string) => {\n  let matches\n  let lastIndex = 0\n  const values = []\n  while ((matches = QUERY_REGEXP.exec(rawValue))) {\n    const [, open, prop, colon, value, close] = matches\n    const getter = (mediaGetters as any)[prop]\n    if (getter) {\n      values.push(rawValue.slice(lastIndex, matches.index))\n      values.push(\n        (p: object) => `${open}${prop}${colon}${getter(value)(p)}${close}`,\n      )\n      lastIndex = matches.index + matches[0].length\n    }\n  }\n  values.push(rawValue.slice(lastIndex, rawValue.length))\n  return values\n}\n\nexport const createTransform =\n  (generator: StyleGenerator) =>\n  (rawValue: any): any => {\n    if (typeof rawValue !== 'string') return rawValue\n    let matches\n    let lastIndex = 0\n    const values = []\n    while ((matches = MATCH_REGEXP.exec(rawValue))) {\n      const [, prop, colon, value, imp, semi, media, query, brace] = matches\n      if (media) {\n        values.push(rawValue.slice(lastIndex, matches.index))\n        values.push(media)\n        mediaTransform(query).forEach((v) => values.push(v))\n        values.push(brace)\n        lastIndex = matches.index + matches[0].length\n      } else {\n        const getter = generator.meta.cssGetters[prop]\n        if (getter) {\n          values.push(rawValue.slice(lastIndex, matches.index))\n          values.push(\n            (p: object) =>\n              `${prop}${colon}${getter(value)(p)}${imp || ''}${semi}`,\n          )\n          lastIndex = matches.index + matches[0].length\n        }\n      }\n    }\n    values.push(rawValue.slice(lastIndex, rawValue.length))\n    return values\n  }\n","import { useMemo } from 'react'\nimport { ThemeGetter, ThemeGetterType, CSSScalar } from '@xstyled/system'\n\nexport const createUseGetter =\n  <T extends ThemeGetter>(getter: T, useTheme: () => object) =>\n  (value: ThemeGetterType<T>, defaultValue?: CSSScalar): CSSScalar => {\n    const theme = useTheme()\n    return useMemo(\n      () => getter(value, defaultValue)({ theme }),\n      [value, defaultValue, theme],\n    )\n  }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}